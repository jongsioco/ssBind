from typing import List

import pytest

from ssBind.posepicker import *
from ssBind.tests.generic import *


@pytest.fixture
def conformers_file(path: str) -> str:
    """Path to conformers sdf for assertion

    Args:
        path (str): path to tests directory

    Returns:
        str: Path to conformers
    """
    return os.path.join(path, "data/minimized_conformers.sdf")


@pytest.fixture
def scores_file(path: str) -> str:
    """Path to Scores.csv for assertion

    Args:
        path (str): path to tests directory

    Returns:
        str: Path to scores
    """
    return os.path.join(path, "data/Scores.csv")


@pytest.fixture
def models() -> List[str]:
    """Model compounds generated by the test

    Returns:
        List[str]: Filenames (in current directory)
    """
    return [f"model_{i+1}.sdf" for i in range(9)]


@pytest.fixture
def stored_models(models: List[str], path: str) -> List[str]:
    """Paths to reference model compounds for assertion

    Args:
        models (List[str]): Filenames
        path (str): path to tests directory

    Returns:
        List[str]: Paths to models
    """
    model_dir = os.path.join(path, "data/model_sdf")
    model_files = [os.path.join(model_dir, model) for model in models]
    return model_files


def cleanup(models: List[str]) -> None:
    """Clean up

    Args:
        models (List[str]): Names of model sdf files
    """
    files_to_remove = models + [
        "PC1-PC2.svg",
        "PC1-PC3.svg",
        "PC2-PC3.svg",
        "PCA_Scores.csv",
    ]
    for file in files_to_remove:
        try:
            os.remove(file)
        except OSError:
            pass


def test_posepicker(
    receptor_file: str,
    conformers_file: str,
    scores_file: str,
    models: List[str],
    stored_models: List[str],
) -> None:
    """Test clustering of conformers and selecting model posees

    Args:
        receptor_file (str): Path to receptor pdb
        conformers_file (str): Path to minimized_conformers.sdf
        scores_file (str): Path to Scores.csv
        models (List[str]): sdf files generated by posepicker
        stored_models (List[str]): Paths to reference sdf files for comparison
    """

    cleanup(models)
    picker = PosePicker(receptor_file)
    picker.pick_poses(conformers_file, scores_file)
    for model, stored_model in zip(models, stored_models):
        assert files_equal(model, stored_model)
    cleanup(models)
