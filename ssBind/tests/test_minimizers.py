import shutil
from typing import Union

import MDAnalysis as mda
import pandas as pd
from rdkit import Chem
from rdkit.Chem import rdDistGeom
from rdkit.Chem.rdchem import Mol

from ssBind.minimizer import *
from ssBind.tests.generic import *


def cleanup_smina() -> None:
    """Remove files generated by Smina minimization"""
    for f in ["ligand.sdf", "Scores.csv", "minimized_conformers.sdf"]:
        try:
            os.remove(f)
        except OSError:
            pass

    try:
        shutil.rmtree("tmp")
    except OSError:
        pass


def cleanup_gromacs() -> None:
    """Remove files generated by Gromacs minimization"""
    for f in [
        "ligand.sdf",
        "Scores.csv",
        "gromacs.log",
        "protein.top",
        "posre.itp",
        "minimized_conformers.sdf",
        "trjout.xtc",
        "acpype.LIG.log",
        "LIG.gro",
        "mdout.mdp",
    ]:
        try:
            os.remove(f)
        except OSError:
            pass

    for dir in ["LIG.acpype", "md_setup", "output", "tmp"]:
        try:
            shutil.rmtree(dir)
        except OSError:
            pass


def cleanup_openmm() -> None:
    """Remove files generated by Smina minimization"""
    for f in ["ligand.sdf", "Scores.csv", "minimized_conformers.dcd", "complex.pdb"]:
        try:
            os.remove(f)
        except OSError:
            pass


def minimize_and_test(
    minimizer: Union[GromacsMinimizer, SminaMinimizer, OpenMMinimizer], ligand: Mol
):
    """Run minimization and check that output sdf contains the same molecule

    Args:
        minimizer (Union[GromacsMinimizer, SminaMinimizer]): minimizer to run
        ligand (Mol): ligand as rdkit molecule
    """
    minimizer.run_minimization("ligand.sdf")

    if type(minimizer) == OpenMMinimizer:
        assert os.path.isfile("complex.pdb")
        assert os.path.isfile("minimized_conformers.dcd")
    else:
        suppl = Chem.SDMolSupplier("minimized_conformers.sdf")
        assert len(suppl) == 1
        mol = next(suppl)
        assert canonSmiles(mol) == canonSmiles(ligand)

    scores = pd.read_csv("Scores.csv")
    assert len(scores.columns) == 2
    assert scores.iloc[0, 0].dtype == int
    assert scores.iloc[0, 1].dtype == float


def test_smina_minimizer(receptor_file: str, ligand: Mol) -> None:
    """Test Smina minimizer

    Args:
        receptor_file (str): receptor.pdb protein structure
        ligand (Mol): ligand.mol2 ligand structure
    """
    cleanup_smina()
    ligand_to_sdf(ligand)
    minimizer = SminaMinimizer(receptor_file, nprocs=1)
    minimize_and_test(minimizer, ligand)
    cleanup_smina()


def test_gromacs_minimizer(receptor_file: str, ligand: Mol) -> None:
    """Test GromacsMinimizer

    Args:
        receptor_file (str): receptor.pdb protein structure
        ligand (Mol): ligand.mol2 ligand structure
    """
    cleanup_gromacs()
    ligand_to_sdf(ligand)
    minimizer = GromacsMinimizer(receptor_file, nprocs=1)
    minimize_and_test(minimizer, ligand)
    cleanup_gromacs()


def test_openmm_minimizer(receptor_file: str, ligand: Mol) -> None:
    """Test OpenMM minimizer

    Args:
        receptor_file (str): receptor.pdb protein structure
        ligand (Mol): ligand.mol2 ligand structure
    """
    cleanup_openmm()
    ligand_to_sdf(ligand)
    ligand.SetProp("fixed_atoms", "(1,2,3)")
    rdDistGeom.EmbedMultipleConfs(ligand, 10)
    minimizer = OpenMMinimizer(receptor_file, ligand)
    minimize_and_test(minimizer, ligand)
    u = mda.Universe("complex.pdb", "minimized_conformers.dcd")
    cleanup_openmm()
